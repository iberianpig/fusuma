module Fusuma
  module Plugin
    module Detectors
      class RotateDetector < Detector
        SOURCES: untyped

        BUFFER_TYPE: ::String

        GESTURE_RECORD_TYPE: ::String

        FINGERS: untyped

        BASE_THRESHOLD: ::Float

        # @param buffers [Array<Buffer>]
        # @return [Events::Event] if event is detected
        # @return [NilClass] if event is NOT detected
        # : (Array[untyped]) -> (Fusuma::Plugin::Events::Event | Array[untyped])?
        def detect: (Array[untyped]) -> (Fusuma::Plugin::Events::Event | Array[untyped])?

        # @param [String] gesture
        # @param [Integer] finger
        # @param [String] direction
        # @param [String] status
        # @return [Config::Index]
        # : (gesture: String, finger: Integer, direction: String, status: String) -> Fusuma::Config::Index
        def create_repeat_index: (gesture: String, finger: Integer, direction: String, status: String) -> Fusuma::Config::Index

        # @param [String] gesture
        # @param [Integer] finger
        # @param [String] direction
        # @return [Config::Index]
        # : (gesture: String, finger: Integer, direction: String) -> Fusuma::Config::Index
        def create_oneshot_index: (gesture: String, finger: Integer, direction: String) -> Fusuma::Config::Index

        private

        # : (Float) -> bool
        def moved?: (Float) -> bool

        # : (index: Fusuma::Config::Index, quantity: Float) -> bool
        def enough_oneshot_threshold?: (index: Fusuma::Config::Index, quantity: Float) -> bool

        # : (index: Fusuma::Config::Index) -> Float
        def threshold: (index: Fusuma::Config::Index) -> Float

        # direction of gesture
        class Direction
          CLOCKWISE: ::String

          COUNTERCLOCKWISE: ::String

          # : (angle: Float) -> void
          def initialize: (angle: Float) -> void

          # : () -> String
          def to_s: () -> String

          # : () -> String
          def calc: () -> String
        end

        # quantity of gesture
        class Quantity
          # : (angle: Float) -> void
          def initialize: (angle: Float) -> void

          # : () -> Float
          def to_f: () -> Float
        end
      end
    end
  end
end
